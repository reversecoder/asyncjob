apply plugin: 'maven'

repositories {
    maven {
        url "https://raw.github.com/synergian/wagon-git/releases"
    }
}

configurations {
    deployLibrary
}

dependencies {
    deployLibrary "ar.com.synergian:wagon-git:0.3.0"
}

uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.deployLibrary
        repository(url: 'git:releases://git@github.com:reversecoder/asyncjob.git')
        snapshotRepository(url: 'git:snapshots://git@github.com:reversecoder/asyncjob.git')

//        uniqueVersion = true

        pom.project {
            groupId = 'com.reversecoder.asyncjob'
            version = '1.0.00-SNAPSHOT'
            artifactId = 'library'
            packaging 'aar'
        }
    }
}

// apply plugin: 'maven-publish'
//
//// Package singing information
//ext["signing.keyId"] = ''
//ext["signing.password"] = ''
//ext["signing.secretKeyRingFile"] = ''
//ext["ossrhUsername"] = ''
//ext["ossrhPassword"] = ''
//
//// Library information
//ext["VERSION_NAME"] = ''
//ext["VERSION_CODE"] = ''
//ext["GROUP"] = ''
//
//// POM information
//ext["POM_NAME"] = ''
//ext["POM_PACKAGING"] = ''
//ext["POM_DESCRIPTION"] = ''
//ext["POM_URL"] = ''
//ext["POM_SCM_URL"] = ''
//ext["POM_SCM_CONNECTION"] = ''
//ext["POM_SCM_DEV_CONNECTION"] = ''
//ext["POM_LICENCE_NAME"] = ''
//ext["POM_LICENCE_URL"] = ''
//ext["POM_LICENCE_DIST"] = ''
//ext["POM_DEVELOPER_ID"] = ''
//ext["POM_DEVELOPER_NAME"] = ''
//ext["POM_DEVELOPER_EMAIL"] = ''
//
//// Load all information from secret.properties file
//File secretPropsFile = new File ("${rootDir}/publish/secret.properties")
//if (secretPropsFile.exists()) {
//    println "Found secret props file, loading props"
//    Properties p = new Properties()
//    p.load(new FileInputStream(secretPropsFile))
//    p.each { name, value ->
//        ext[name] = value
//    }
//} else {
//    println "No props file, loading env vars"
//    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
//    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
//    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
//    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
//    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
//}
//
//// Set common information of the library
//setVersion(VERSION_NAME)
//setGroup(GROUP)
//
//def isReleaseBuild() {
//    return !VERSION_NAME.contains("SNAPSHOT")
//}
//
//def getReleaseRepositoryUrl() {
//    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
////            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
//            : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
//}
//
//def getSnapshotRepositoryUrl() {
//    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
////            : "https://oss.sonatype.org/content/repositories/snapshots/"
//            : "https://s01.oss.sonatype.org/content/repositories/snapshots/"
//}
//
//def getRepositoryUsername() {
////    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
//    return ((ossrhUsername != null && !ossrhUsername.isEmpty()) ? ossrhUsername : "")
//}
//
//def getRepositoryPassword() {
////    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
//    return ((ossrhPassword != null && !ossrhPassword.isEmpty()) ? ossrhPassword : "")
//}
//
//def configurePom(pom) {
//    pom.name = POM_NAME
//    pom.packaging = POM_PACKAGING
//    pom.description = POM_DESCRIPTION
//    pom.url = POM_URL
//
//    pom.scm {
//        url = POM_SCM_URL
//        connection = POM_SCM_CONNECTION
//        developerConnection = POM_SCM_DEV_CONNECTION
//    }
//
//    // A slightly hacky fix so that your POM will include any transitive dependencies
//    // that your library builds upon
////    pom.withXml {
////        def dependenciesNode = asNode().appendNode('dependencies')
////
////        project.configurations.implementation.allDependencies.each {
////            def dependencyNode = dependenciesNode.appendNode('dependency')
////            dependencyNode.appendNode('groupId', it.group)
////            dependencyNode.appendNode('artifactId', it.name)
////            dependencyNode.appendNode('version', it.version)
////        }
////    }
//
//    pom.licenses {
//        license {
//            name = POM_LICENCE_NAME
//            url = POM_LICENCE_URL
//            distribution = POM_LICENCE_DIST
//        }
//    }
//
//    pom.developers {
//        developer {
//            id = POM_DEVELOPER_ID
//            name = POM_DEVELOPER_NAME
//            email = POM_DEVELOPER_EMAIL
//        }
//    }
//}
//
//afterEvaluate { project ->
//    publishing {
//        repositories {
//            maven {
//                def releasesRepoUrl = getReleaseRepositoryUrl()
//                def snapshotsRepoUrl = getSnapshotRepositoryUrl()
//                url = isReleaseBuild() ? releasesRepoUrl : snapshotsRepoUrl
//
//                credentials(PasswordCredentials) {
//                    username = getRepositoryUsername()
//                    password = getRepositoryPassword()
//                }
//            }
//        }
//    }
//
//    if (project.getPlugins().hasPlugin('com.android.application') ||
//            project.getPlugins().hasPlugin('com.android.library')) {
//
//        task androidJavadocs(type: Javadoc) {
//            source = android.sourceSets.main.java.source
//            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//            excludes = ['**/*.kt']
//        }
//
//        task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
//            archiveClassifier.set("javadoc")
//            from androidJavadocs.destinationDir
//        }
//
//        task androidSourcesJar(type: Jar) {
//            archiveClassifier.set("sources")
//            from android.sourceSets.main.java.source
//        }
//    }
//
//    if (JavaVersion.current().isJava8Compatible()) {
//        allprojects {
//            tasks.withType(Javadoc) {
//                options.addStringOption('Xdoclint:none', '-quiet')
//            }
//        }
//    }
//
//    if (JavaVersion.current().isJava9Compatible()) {
//        allprojects {
//            tasks.withType(Javadoc) {
//                options.addBooleanOption('html5', true)
//            }
//        }
//    }
//
//    artifacts {
//        if (project.getPlugins().hasPlugin('com.android.application') ||
//                project.getPlugins().hasPlugin('com.android.library')) {
//            archives androidSourcesJar
//            archives androidJavadocsJar
//        }
//    }
//
//    android.libraryVariants.all { variant ->
//        tasks.androidJavadocs.doFirst {
//            classpath += files(variant.javaCompileProvider.get().classpath.files.join(File.pathSeparator))
//        }
//    }
//
//    publishing.publications.all { publication ->
//        publication.groupId = GROUP
//        publication.version = VERSION_NAME
//
//        publication.artifact androidSourcesJar
//        publication.artifact androidJavadocsJar
//
//        configurePom(publication.pom)
//    }
//
//    signing {
//        publishing.publications.all { publication ->
//            sign publication
//        }
//    }
//}